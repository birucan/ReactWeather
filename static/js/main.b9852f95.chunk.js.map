{"version":3,"sources":["components/AppBar.js","components/Licenses.js","ApiManager.js","img/svg/0cloudy.svg","img/svg/0clear.svg","img/svg/0drizzle.svg","img/svg/0rainy.svg","img/svg/0storm.svg","img/svg/0smoke.svg","img/svg/006-snowy.svg","components/Map.js","components/Forecast.js","components/Content.js","App.js","reportWebVitals.js","index.js"],"names":["AppBarUI","props","pageHandler","value","setPageState","React","useState","drawerState","setDrawerState","toggleDrawer","open","event","useEffect","pageState","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","Drawer","anchor","onClose","List","ListItem","button","ListItemText","ListItemIcon","href","style","textDecoration","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Licenses","classes","Card","CardContent","gutterBottom","component","getForecastCity","city","a","fetch","process","fetched","json","data","getForecastZip","zip","getForecastGeo","latitude","longitude","getCurrentWeather","MapComponent","center","zoom","mapState","setMapState","flyTo","MapContainer","whenCreated","width","height","LayersControl","BaseLayer","checked","name","TileLayer","attribution","url","Forecast","farenFactor","farenSum","simbol","submitedState","lat","lon","searchState","weathericons","Clouds","cloudIcon","Clear","sunIcon","Drizzle","lightRainIcon","Rain","heavyRainicon","Thunderstorm","lightningIcon","Smoke","smokeIcon","Snow","snowIcon","days","dataState","setDataState","parsed","setParsed","loading","setLoading","hourState","setHourState","farenState","setFarenState","handleHourChange","target","handleFarenChange","dataParser","fetchedData","cod","message","then","result","currentWeather","Grid","container","spacing","direction","alignItems","justify","item","xs","align","country","src","weather","main","alt","description","temp","toFixed","feels_like","humidity","FormControl","InputLabel","Select","labelId","id","onChange","MenuItem","list","setMapProps","coord","Paper","elevation","Content","latitudeState","setLatitudeState","longitudState","setLongitudState","positionState","setPositionState","setSumbitedState","setSearchState","searchInputState","setSearchInputState","navigator","geolocation","watchPosition","coords","handleSearchInputChange","Container","FormLabel","RadioGroup","FormControlLabel","control","Radio","label","Input","placeholder","inputProps","startAdornment","InputAdornment","Button","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9852f95.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\n\r\n//assets\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\n\r\n//Contains AppBar, which sits on top of the webapp. contains drawer menu as well\r\nfunction AppBarUI(props) {\r\n  function pageHandler(value) {\r\n    props.setPageState(value);\r\n  }\r\n\r\n  //State hook for managing the opening and closing state for the drawer\r\n  const [drawerState, setDrawerState] = React.useState(false);\r\n\r\n  //Toggles the drawer for it to open or close\r\n  const toggleDrawer = (open) => (event) => {\r\n    setDrawerState(open);\r\n  };\r\n\r\n  //Used to update the app state by changing the father components props\r\n  React.useEffect(() => {\r\n    props.setPageState(props.pageState);\r\n  }, [props]);\r\n\r\n  //Content inside the Drawer\r\n  const buttonList = () => (\r\n    <List>\r\n      <ListItem\r\n        button\r\n        onClick={() => {\r\n          pageHandler(\"weather\");\r\n        }}\r\n      >\r\n        <ListItemText>Weather</ListItemText>\r\n        <ListItemIcon>\r\n          <WbSunnyIcon />\r\n        </ListItemIcon>\r\n      </ListItem>\r\n\r\n      <ListItem\r\n        button\r\n        onClick={() => {\r\n          pageHandler(\"licenses\");\r\n        }}\r\n      >\r\n        <ListItemText>Licenses</ListItemText>\r\n        <ListItemIcon>\r\n          <DescriptionIcon />\r\n        </ListItemIcon>\r\n      </ListItem>\r\n\r\n      <a\r\n        href=\"https://github.com/birucan/ReactWeather\"\r\n        style={{ textDecoration: \"none\", color: \"black\" }}\r\n      >\r\n        <ListItem button>\r\n          <ListItemText>Git repo</ListItemText>\r\n          <ListItemIcon>\r\n            <GitHubIcon />\r\n          </ListItemIcon>\r\n        </ListItem>\r\n      </a>\r\n    </List>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"AppBarContainer\"\r\n      pageState={props.pageState}\r\n      setPageState={pageHandler}\r\n    >\r\n      <AppBar position=\"sticky\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={toggleDrawer(true)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography variant=\"h6\">React Weather App</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer anchor={\"left\"} open={drawerState} onClose={toggleDrawer(false)}>\r\n        {buttonList()}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { AppBarUI };\r\n","import Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n//Contains the liceses for assets used in this we app\r\nfunction Licenses() {\r\n  const classes = useStyles;\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          Icon Licenses\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Weather Icons\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <div>\r\n            Icons made by{\" \"}\r\n            <a\r\n              href=\"https://www.flaticon.com/authors/iconixar\"\r\n              title=\"iconixar\"\r\n            >\r\n              iconixar\r\n            </a>{\" \"}\r\n            from{\" \"}\r\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n              www.flaticon.com\r\n            </a>\r\n          </div>\r\n          <br />\r\n        </Typography>\r\n      </CardContent>\r\n\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          Icon Licenses\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Github Icon\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <div>\r\n            Icons made by{\" \"}\r\n            <a\r\n              href=\"https://www.flaticon.com/authors/pixel-perfect\"\r\n              title=\"Pixel perfect\"\r\n            >\r\n              Pixel perfect\r\n            </a>{\" \"}\r\n            from{\" \"}\r\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n              www.flaticon.com\r\n            </a>\r\n          </div>\r\n          <br />\r\n        </Typography>\r\n      </CardContent>\r\n\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          Icon Licenses\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Licenses Icon\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <div>\r\n            Icons made by{\" \"}\r\n            <a href=\"https://www.flaticon.com/authors/wanicon\" title=\"wanicon\">\r\n              wanicon\r\n            </a>{\" \"}\r\n            from{\" \"}\r\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n              www.flaticon.com\r\n            </a>\r\n          </div>\r\n          <br />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { Licenses };\r\n","\r\n//Api call for forecast using city\r\nconst getForecastCity = async function (city) {\r\n  let fetched = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/forecast/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  );\r\n  let data = await fetched.json();\r\n  return data;\r\n};\r\n//Api call for forecast using Zip code\r\nconst getForecastZip = async function (zip) {\r\n  let fetched = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/forecast/?zip=${zip}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  );\r\n  let data = await fetched.json();\r\n  return data;\r\n};\r\n//Api call for forecast using Geolocation\r\nconst getForecastGeo = async function (latitude, longitude) {\r\n  let fetched = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/forecast/?lat=${latitude}&lon=${longitude}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  );\r\n  let data = await fetched.json();\r\n  return data;\r\n};\r\n//Api call for current weather using city\r\nconst getCurrentWeather = async function (city) {\r\n  let fetched = await fetch(\r\n    `${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  );\r\n  let data = await fetched.json();\r\n  return data;\r\n};\r\nexport { getForecastCity, getForecastZip, getForecastGeo, getCurrentWeather };\r\n","export default __webpack_public_path__ + \"static/media/0cloudy.09a2ccb9.svg\";","export default __webpack_public_path__ + \"static/media/0clear.4eccead1.svg\";","export default __webpack_public_path__ + \"static/media/0drizzle.b1c4d2b1.svg\";","export default __webpack_public_path__ + \"static/media/0rainy.98a12099.svg\";","export default __webpack_public_path__ + \"static/media/0storm.9cf155d9.svg\";","export default __webpack_public_path__ + \"static/media/0smoke.56ea0f2a.svg\";","export default __webpack_public_path__ + \"static/media/006-snowy.b349810c.svg\";","import React from \"react\";\r\nimport { MapContainer, TileLayer, LayersControl } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n//Generates and displays map, stores current map on state becauase map isnt mutable, so it updates everytime the map State changes\r\nfunction MapComponent({ center, zoom }) {\r\n  const [mapState, setMapState] = React.useState(null);\r\n\r\n  //Move to another location\r\n  if (mapState) {\r\n    mapState.flyTo(center);\r\n  }\r\n  const styleMap = { width: \"100%\", height: \"60vh\" };\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer\r\n        whenCreated={setMapState}\r\n        style={styleMap}\r\n        center={center}\r\n        zoom={12}\r\n      >\r\n        <LayersControl position=\"topright\">\r\n          <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\r\n            <TileLayer\r\n              attribution='&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n          </LayersControl.BaseLayer>\r\n        </LayersControl>\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { MapComponent };\r\n","import * as React from \"react\";\r\nimport {\r\n  getForecastCity,\r\n  getForecastZip,\r\n  getForecastGeo,\r\n  getCurrentWeather,\r\n} from \".././ApiManager\";\r\nimport {\r\n  Card,\r\n  FormControl,\r\n  InputLabel,\r\n  Typography,\r\n  MenuItem,\r\n  Grid,\r\n  Paper,\r\n  Select,\r\n} from \"@material-ui/core/\";\r\n\r\nimport cloudIcon from \".././img/svg/0cloudy.svg\";\r\nimport sunIcon from \".././img/svg/0clear.svg\";\r\nimport lightRainIcon from \".././img/svg/0drizzle.svg\";\r\nimport heavyRainicon from \".././img/svg/0rainy.svg\";\r\nimport lightningIcon from \".././img/svg/0storm.svg\";\r\nimport smokeIcon from \".././img/svg/0smoke.svg\";\r\nimport snowIcon from \".././img/svg/006-snowy.svg\";\r\nimport { MapComponent } from \"./Map\";\r\n\r\n//Container for 5 day forecast and hour selector\r\nfunction Forecast({ submitedState, city, zip, lat, lon, searchState }) {\r\n  //contains icons corresponding to data from api\r\n  const weathericons = {\r\n    Clouds: cloudIcon,\r\n    Clear: sunIcon,\r\n    Drizzle: lightRainIcon,\r\n    Rain: heavyRainicon,\r\n    Thunderstorm: lightningIcon,\r\n    Smoke: smokeIcon,\r\n    Snow: snowIcon,\r\n  };\r\n  //Days for easy access to forecast data\r\n  const days = {\r\n    day0: 0,\r\n    day1: 7,\r\n    day2: 15,\r\n    day3: 23,\r\n    day4: 31,\r\n  };\r\n\r\n  //Contains saved data from query\r\n  const [dataState, setDataState] = React.useState();\r\n  //Contains what is being displayed in the component\r\n  const [parsed, setParsed] = React.useState();\r\n  //Manages the state for the component\r\n  const [loading, setLoading] = React.useState(true);\r\n  //Manages hours to select for forecast\r\n  const [hourState, setHourState] = React.useState(0);\r\n  //Manages if the forecast should be shown in fahrenheit or celsius\r\n  const [farenState, setFarenState] = React.useState(false);\r\n  //Contains map component\r\n  const [mapState, setMapState] = React.useState(\"\");\r\n\r\n  //Sets factors For conversion to farenheight\r\n  var farenFactor;\r\n  var farenSum;\r\n  var simbol;\r\n\r\n  //first calculation for Frenheight factors\r\n  if (farenState) {\r\n    farenFactor = 9 / 5;\r\n    farenSum = 32;\r\n    simbol = \"°F\";\r\n  } else {\r\n    farenFactor = 1;\r\n    farenSum = 0;\r\n    simbol = \"°C\";\r\n  }\r\n  //Handles hour change on list\r\n  const handleHourChange = (event) => {\r\n    setHourState(event.target.value);\r\n  };\r\n  //Handles format change on list and set the proper factors\r\n  const handleFarenChange = (event) => {\r\n    setFarenState(event.target.value);\r\n    if (farenState) {\r\n      farenFactor = 9 / 5;\r\n      farenSum = 32;\r\n      simbol = \"°F\";\r\n    } else {\r\n      farenFactor = 1;\r\n      farenSum = 0;\r\n      simbol = \"°C\";\r\n    }\r\n  };\r\n  //sets map component to the set coordinates, the actual change is managed by the component\r\n  function setMapProps(lat, lon) {\r\n    setMapState(<MapComponent center={[lat, lon]} zoom={4} />);\r\n  }\r\n\r\n  //Takes data from query and converts it to cards with weather and forcast or an error display\r\n  const dataParser = function (fetchedData) {\r\n    if (\r\n      fetchedData.cod === \"401\" ||\r\n      fetchedData.cod === \"404\" ||\r\n      fetchedData.cod === \"429\" ||\r\n      fetchedData.cod === \"400\"\r\n    ) {\r\n      setParsed(\"Error \" + fetchedData.cod + \": \" + fetchedData.message);\r\n    } else {\r\n      setDataState(fetchedData);\r\n\r\n      getCurrentWeather(fetchedData.city.name).then((result) => {\r\n        const currentWeather = result;\r\n\r\n        setParsed(\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            style={{ minWidth: \"100vh\" }}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                gutterBottom\r\n                variant=\"h4\"\r\n                component=\"h2\"\r\n                align=\"center\"\r\n              >\r\n                Current Weather for {fetchedData.city.name},{\" \"}\r\n                {fetchedData.city.country}\r\n              </Typography>\r\n              <Grid item xs={12}>\r\n                <Card>\r\n                  <Card>\r\n                    <img\r\n                      src={weathericons[currentWeather.weather[0].main]}\r\n                      alt=\"weather icon\"\r\n                      style={{ width: \"10em\", height: \"10em\" }}\r\n                    />\r\n\r\n                    <Typography\r\n                      gutterBottom\r\n                      variant=\"subtitle1\"\r\n                      component=\"h5\"\r\n                      align=\"center\"\r\n                    >\r\n                      Description: {currentWeather.weather[0].description}\r\n                    </Typography>\r\n                  </Card>\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Temperature:{\" \"}\r\n                    {(\r\n                      currentWeather.main.temp * farenFactor +\r\n                      farenSum\r\n                    ).toFixed(1)}\r\n                    {simbol}\r\n                  </Typography>\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Feels Like:{\" \"}\r\n                    {(\r\n                      currentWeather.main.feels_like * farenFactor +\r\n                      farenSum\r\n                    ).toFixed(1)}\r\n                    {simbol}\r\n                  </Typography>\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Humidity: {currentWeather.main.humidity}%\r\n                  </Typography>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                gutterBottom\r\n                variant=\"h4\"\r\n                component=\"h2\"\r\n                align=\"center\"\r\n              >\r\n                Forecast for {fetchedData.city.name}, {fetchedData.city.country}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl variant=\"filled\">\r\n                <InputLabel>Hour</InputLabel>\r\n                <Select\r\n                  labelId=\"hour\"\r\n                  id=\"demo-simple-select-filled\"\r\n                  value={hourState}\r\n                  onChange={handleHourChange}\r\n                >\r\n                  <MenuItem value={0}>3:00 AM</MenuItem>\r\n                  <MenuItem value={1}>6:00 AM</MenuItem>\r\n                  <MenuItem value={2}>9:00 AM</MenuItem>\r\n                  <MenuItem value={3}>12:00 PM</MenuItem>\r\n                  <MenuItem value={4}>3:00 PM</MenuItem>\r\n                  <MenuItem value={5}>6:00 PM</MenuItem>\r\n                  <MenuItem value={6}>9:00 PM</MenuItem>\r\n                  <MenuItem value={7}>12:00 AM</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl variant=\"filled\">\r\n                <InputLabel>Format</InputLabel>\r\n                <Select\r\n                  labelId=\"format\"\r\n                  id=\"demo-simple-select-filled2\"\r\n                  value={farenState}\r\n                  onChange={handleFarenChange}\r\n                >\r\n                  <MenuItem value={true}>Fahrenheit</MenuItem>\r\n                  <MenuItem value={false}>Celsius</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  align=\"center\"\r\n                >\r\n                  Today\r\n                </Typography>\r\n                <Card>\r\n                  <img\r\n                    src={\r\n                      weathericons[\r\n                        fetchedData.list[days[\"day0\"] + hourState].weather[0]\r\n                          .main\r\n                      ]\r\n                    }\r\n                    alt=\"weather icon\"\r\n                    style={{ width: \"10em\", height: \"10em\" }}\r\n                  />\r\n\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Description:{\" \"}\r\n                    {\r\n                      fetchedData.list[days[\"day0\"] + hourState].weather[0]\r\n                        .description\r\n                    }\r\n                  </Typography>\r\n                </Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Temperature:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day0\"] + hourState].main.temp *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Feels Like:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day0\"] + hourState].main.feels_like *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Humidity:{\" \"}\r\n                  {fetchedData.list[days[\"day0\"] + hourState].main.humidity}%\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n              <Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  align=\"center\"\r\n                >\r\n                  Tomorrow\r\n                </Typography>\r\n                <Card>\r\n                  <img\r\n                    src={\r\n                      weathericons[\r\n                        fetchedData.list[days[\"day1\"] + hourState].weather[0]\r\n                          .main\r\n                      ]\r\n                    }\r\n                    alt=\"weather icon\"\r\n                    style={{ width: \"10em\", height: \"10em\" }}\r\n                  />\r\n\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Description:{\" \"}\r\n                    {\r\n                      fetchedData.list[days[\"day1\"] + hourState].weather[0]\r\n                        .description\r\n                    }\r\n                  </Typography>\r\n                </Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Temperature:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day1\"] + hourState].main.temp *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Feels Like:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day1\"] + hourState].main.feels_like *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Humidity:{\" \"}\r\n                  {fetchedData.list[days[\"day1\"] + hourState].main.humidity}%\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n              <Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  align=\"center\"\r\n                >\r\n                  Day 3\r\n                </Typography>\r\n                <Card>\r\n                  <img\r\n                    src={\r\n                      weathericons[\r\n                        fetchedData.list[days[\"day2\"] + hourState].weather[0]\r\n                          .main\r\n                      ]\r\n                    }\r\n                    alt=\"weather icon\"\r\n                    style={{ width: \"10em\", height: \"10em\" }}\r\n                  />\r\n\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Description:{\" \"}\r\n                    {\r\n                      fetchedData.list[days[\"day2\"] + hourState].weather[0]\r\n                        .description\r\n                    }\r\n                  </Typography>\r\n                </Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Temperature:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day2\"] + hourState].main.temp *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Feels Like:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day2\"] + hourState].main.feels_like *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Humidity:{\" \"}\r\n                  {fetchedData.list[days[\"day2\"] + hourState].main.humidity}%\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n              <Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  align=\"center\"\r\n                >\r\n                  Day 4\r\n                </Typography>\r\n                <Card>\r\n                  <img\r\n                    src={\r\n                      weathericons[\r\n                        fetchedData.list[days[\"day3\"] + hourState].weather[0]\r\n                          .main\r\n                      ]\r\n                    }\r\n                    alt=\"weather icon\"\r\n                    style={{ width: \"10em\", height: \"10em\" }}\r\n                  />\r\n\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Description:{\" \"}\r\n                    {\r\n                      fetchedData.list[days[\"day3\"] + hourState].weather[0]\r\n                        .description\r\n                    }\r\n                  </Typography>\r\n                </Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Temperature:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day3\"] + hourState].main.temp *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Feels Like:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day3\"] + hourState].main.feels_like *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Humidity:{\" \"}\r\n                  {fetchedData.list[days[\"day3\"] + hourState].main.humidity}%\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item >\r\n              <Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  align=\"center\"\r\n                >\r\n                  Day 5\r\n                </Typography>\r\n                <Card>\r\n                  <img\r\n                    src={\r\n                      weathericons[\r\n                        fetchedData.list[days[\"day4\"] + hourState].weather[0]\r\n                          .main\r\n                      ]\r\n                    }\r\n                    alt=\"weather icon\"\r\n                    style={{ width: \"10em\", height: \"10em\" }}\r\n                  />\r\n\r\n                  <Typography\r\n                    gutterBottom\r\n                    variant=\"subtitle1\"\r\n                    component=\"h5\"\r\n                    align=\"center\"\r\n                  >\r\n                    Description:{\" \"}\r\n                    {\r\n                      fetchedData.list[days[\"day4\"] + hourState].weather[0]\r\n                        .description\r\n                    }\r\n                  </Typography>\r\n                </Card>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Temperature:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day4\"] + hourState].main.temp *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Feels Like:{\" \"}\r\n                  {(\r\n                    fetchedData.list[days[\"day4\"] + hourState].main.feels_like *\r\n                      farenFactor +\r\n                    farenSum\r\n                  ).toFixed(1)}\r\n                  {simbol}\r\n                </Typography>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"subtitle1\"\r\n                  component=\"h5\"\r\n                  align=\"center\"\r\n                >\r\n                  Humidity:{\" \"}\r\n                  {fetchedData.list[days[\"day4\"] + hourState].main.humidity}%\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      });\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  //city api data getter\r\n  React.useEffect(() => {\r\n    if (submitedState && searchState === \"city name\") {\r\n      getForecastCity(city).then((result) => dataParser(result));\r\n    }\r\n  }, [city, submitedState, searchState]);\r\n\r\n  //Zip code api data getter\r\n  React.useEffect(() => {\r\n    if (submitedState && searchState === \"zip code\") {\r\n      getForecastZip(zip).then((result) => {\r\n        dataParser(result);\r\n      });\r\n    }\r\n  }, [zip, submitedState, searchState]);\r\n\r\n  //geolocation api data getter\r\n  React.useEffect(() => {\r\n    if (searchState === \"current location\") {\r\n      getForecastGeo(lat, lon).then((result) => {\r\n        dataParser(result);\r\n      });\r\n    }\r\n  }, [lat, lon, searchState]);\r\n\r\n  //Updates forecast and weather whenever format is changed or hour is changed\r\n  React.useEffect(() => {\r\n    if (dataState) {\r\n      dataParser(dataState);\r\n    }\r\n  }, [hourState, farenState]);\r\n\r\n  //Responsable for updating map when data Changes\r\n  React.useEffect(() => {\r\n    if (dataState) {\r\n      setMapProps(dataState.city.coord.lat, dataState.city.coord.lon);\r\n    }\r\n  }, [dataState]);\r\n\r\n  if (loading) {\r\n    return \" \";\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Grid spacing={3}>\r\n          <Grid item xs={12} />\r\n          <Grid item xs={12}>\r\n            <Paper elevation={4}>{parsed}</Paper>\r\n          </Grid>\r\n          <Grid item xs={12} />\r\n          <Grid item xs={12}>\r\n            {mapState}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Forecast };\r\n","import React from \"react\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n//local components\r\nimport { Licenses } from \"./Licenses\";\r\nimport { Forecast } from \"./Forecast\";\r\n\r\n//Controls which view is currently shown and contains the weather forecast and map component, it also contains the licenses view\r\nfunction Content(props) {\r\n  //state hook for geolocacion\r\n  const [latitudeState, setLatitudeState] = React.useState();\r\n  const [longitudState, setLongitudState] = React.useState();\r\n  const [positionState, setPositionState] = React.useState();\r\n\r\n  //state hook that manages if the query was submutted since we have limited API calls\r\n  const [submitedState, setSumbitedState] = React.useState(false);\r\n\r\n  //This state hook manages what type of search the user is going to use\r\n  const [searchState, setSearchState] = React.useState(\"city name\");\r\n\r\n  //This state hook manages The user input for the search\r\n  const [searchInputState, setSearchInputState] = React.useState(\"\");\r\n\r\n  //gets your current geolocation\r\n  React.useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.watchPosition(function (position) {\r\n        setPositionState(position);\r\n        setLatitudeState(position.coords.latitude);\r\n        setLongitudState(position.coords.longitude);\r\n      });\r\n    }\r\n  }, [navigator.geolocation]);\r\n\r\n  //Changes the value for the search State\r\n  const handleSearchChange = (event) => {\r\n    setSumbitedState(false);\r\n    setSearchState(event.target.value);\r\n  };\r\n\r\n  //Manages input for the searchbar\r\n  const handleSearchInputChange = (event) => {\r\n    setSumbitedState(false);\r\n    setSearchInputState(event.target.value);\r\n  };\r\n\r\n  //Returns the searchbar or geolocation depending on the state\r\n  function getSearchBar() {\r\n    if (searchState === \"city name\" || searchState === \"zip code\") {\r\n      return (\r\n        <div>\r\n          <Input\r\n            placeholder=\"Search...\"\r\n            value={searchInputState}\r\n            onChange={handleSearchInputChange}\r\n            inputProps={{ \"aria-label\": \"description\" }}\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            }\r\n          ></Input>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setSumbitedState(true);\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      );\r\n    } else {\r\n      if (!positionState) {\r\n        return <h2>Unable to get you geolocation</h2>;\r\n      } else {\r\n        return (\r\n          <h4>\r\n            Current geolocation: Latitude:{latitudeState}, Longitud:\r\n            {longitudState}\r\n          </h4>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  //Manages props sent to Forecast component\r\n  function getForecast() {\r\n    if (searchState === \"city name\") {\r\n      return (\r\n        <Forecast\r\n          city={searchInputState}\r\n          submitedState={submitedState}\r\n          searchState={searchState}\r\n        />\r\n      );\r\n    }\r\n    if (searchState === \"zip code\") {\r\n      return (\r\n        <Forecast\r\n          zip={searchInputState}\r\n          submitedState={submitedState}\r\n          searchState={searchState}\r\n        />\r\n      );\r\n    }\r\n    if (searchState === \"current location\") {\r\n      if (latitudeState && longitudState) {\r\n        console.log(\"llegue\");\r\n        return (\r\n          <Forecast\r\n            lat={latitudeState}\r\n            lon={longitudState}\r\n            searchState={searchState}\r\n          />\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  //If page state is weather it returns the search bar and the weather components, if not it returns licenses\r\n  if (props.pageState === \"weather\") {\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} />\r\n\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" component=\"h5\">\r\n              Search by inputing {searchState}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <Paper elevation={4}>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Search Setting</FormLabel>\r\n                    <RadioGroup\r\n                      color=\"primary\"\r\n                      aria-label=\"location\"\r\n                      name=\"searchState\"\r\n                      value={searchState}\r\n                      onChange={handleSearchChange}\r\n                    >\r\n                      <FormControlLabel\r\n                        color=\"primary\"\r\n                        value=\"city name\"\r\n                        control={<Radio />}\r\n                        label=\"City Name\"\r\n                      />\r\n                      <FormControlLabel\r\n                        color=\"primary\"\r\n                        value=\"zip code\"\r\n                        control={<Radio />}\r\n                        label=\"Zip Code\"\r\n                      />\r\n                      <FormControlLabel\r\n                        color=\"primary\"\r\n                        value=\"current location\"\r\n                        control={<Radio />}\r\n                        label=\"Geolocation\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                  {getSearchBar()}\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            {getForecast() || \" \"}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n  if (props.pageState === \"licenses\") {\r\n    return <Licenses />;\r\n  } else {\r\n    return <h1>You shouldn't be here</h1>;\r\n  }\r\n}\r\n\r\nexport { Content };\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {Container} from  \"@material-ui/core/\"; \r\n\r\n//Local component imports\r\nimport { AppBarUI } from \"./components/AppBar.js\";\r\nimport { Content } from \"./components/Content.js\";\r\n\r\nfunction App() {\r\n  //This state hook handles what page is loaded\r\n  const [pageState, setPageState] = React.useState(\"weather\");\r\n\r\n  //this is the handler for the page state\r\n  function pageHandler(value) {\r\n    setPageState(value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <AppBarUI pageState={pageState} setPageState={pageHandler} />\r\n        </div>\r\n      <Container spacing={3}>\r\n        <Content pageState={pageState} />\r\n      </Container>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nrequire('dotenv').config();\r\n\r\nReactDOM.render(\r\n  \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}